<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-02-25T09:16:43-05:00</updated><id>/feed.xml</id><title type="html">Ben Thomasson</title><subtitle>The personal blog for Ben Thomasson where I document my projects and experiments.</subtitle><author><name>Ben Thomasson</name></author><entry><title type="html">Smolagents are amazing</title><link href="/smolagents/ai/agents/smolagents-are-amazing/" rel="alternate" type="text/html" title="Smolagents are amazing" /><published>2025-02-22T12:36:00-05:00</published><updated>2025-02-22T12:36:00-05:00</updated><id>/smolagents/ai/agents/smolagents-are-amazing</id><content type="html" xml:base="/smolagents/ai/agents/smolagents-are-amazing/"><![CDATA[<p><a href="https://github.com/huggingface/smolagents">Smolagents</a> is one of those projects
that will change the industry. It was released at just the right time to build
upon the recent open-source advances in reasoning models like deepseek-R1.</p>

<p>The key insight here is that LLMs have been trained on a large corpus of Python
code and can express procedures in Python better than in English or JSON.  So let
the LLMs do that and then evaluate the code and give feedback to the model.  Huggingface
calls this process an agent.</p>

<p>Reasoning models build upon the LLMs knowledge of Python to produce reasoning about code.
They do this by talking through the problem using thinking tokens. “Talking to themselves”
gives them room to express concepts and then prompt themselves to improve their decisions.</p>

<p>In my experimentation, I have found that the reasoning models respond well to feedback
and can fix errors in their code without any help from humans.  They only need feedback
from the real world.   This almost entirely eliminates hallucinations because they can reconcile
their knowledge with reality and correct their mistakes.</p>

<p>Let’s put aside the abilities of the reasoning models for a moment and look at the code.
This repository is an example of really great software architecture and development. It uses
exactly the right amount of abstraction for the problem at hand, which is not very much.</p>

<p>The
<a href="https://github.com/huggingface/smolagents/blob/7927bcaea90d882c1c56261a6ea5c5ab88c0e766/src/smolagents/agents.py#L1119">CodeAgent</a>
is the innovative part of the project.  It uses a
<a href="https://github.com/huggingface/smolagents/blob/main/src/smolagents/local_python_executor.py">LocalPythonInterpreter</a>
(or a remote sandbox) to evaluate the code generated by the model.  The LocalPythonInterpreter
code is a great example of how to build an interpreter for a language.</p>

<p>The LocalPythonInterpreter is a great start if you wanted to build a Python
interpreter of your code. Here the code is parsed into a abstract syntax tree.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expression</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</code></pre></div></div>

<p>After it is parsed into an expression it is recursively evaluated.  There are
evaluate_<type> methods for each type of node in the AST.</type></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="n">evaluate_ast</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">static_tools</span><span class="p">,</span> <span class="n">custom_tools</span><span class="p">,</span> <span class="n">authorized_imports</span><span class="p">)</span>
</code></pre></div></div>

<p>There is a <code class="language-plaintext highlighter-rouge">state</code> dictionary that is passed along with the evaluation of the
AST.  I have used that to trace the tools that were called during the
evaluation.</p>

<p>The LocalPythonInterpreter is a hidden gem inside this project.  It may not be
extremely secure, it is a great tool for learning about building interpreters.</p>

<p>The CodeAgent works by defining tools that can be used within the Python code
that is evaluated by the LocalPythonInterpreter.  These tools can call any Python
code and gives the agent access to the real world.</p>

<p>Exploring this project raised a few questions for me:</p>

<ul>
  <li>How well could an agent incorporate feedback from the tools?</li>
  <li>How good are they at problem solving when given incomplete information?</li>
  <li>Can they reach out into the real world to find out what they need to know to complete a task?</li>
  <li>What if we gave them access to all the tools that developers have while they are coding?  Can they produce the same or better code?</li>
</ul>

<p>In future posts I’ll explore these questions with tools that interact with real world systems to see how they fare.</p>]]></content><author><name>Ben Thomasson</name></author><category term="smolagents" /><category term="ai" /><category term="agents" /><summary type="html"><![CDATA[Smolagents is one of those projects that will change the industry. It was released at just the right time to build upon the recent open-source advances in reasoning models like deepseek-R1.]]></summary></entry><entry><title type="html">Remote Ansible Modules Continued</title><link href="/ansible/code-review/remote-ansible-modules2/" rel="alternate" type="text/html" title="Remote Ansible Modules Continued" /><published>2025-02-22T10:13:00-05:00</published><updated>2025-02-22T10:13:00-05:00</updated><id>/ansible/code-review/remote-ansible-modules2</id><content type="html" xml:base="/ansible/code-review/remote-ansible-modules2/"><![CDATA[<p>This post answers the question from the <a href="/ansible/code-review/remote-ansible-modules/">last post</a>:</p>

<ul>
  <li>How to modules import from dependencies?</li>
  <li>Do dependencies need to be installed on the remote host?</li>
  <li>Are dependencies shipped to the remote host?</li>
</ul>

<p>Most Ansible modules follow the pattern that the
<a href="https://github.com/ansible-collections/community.general/blob/main/plugins/modules/slack.py">slack</a>
module does of importing utilties from <code class="language-plaintext highlighter-rouge">ansible.module_utils</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="n">AnsibleModule</span>
<span class="kn">from</span> <span class="nn">ansible.module_utils.six.moves.urllib.parse</span> <span class="kn">import</span> <span class="n">urlencode</span>
<span class="kn">from</span> <span class="nn">ansible.module_utils.urls</span> <span class="kn">import</span> <span class="n">fetch_url</span>

</code></pre></div></div>

<p>If we try to run this module remotely we get an error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-av</span> slack.py remote:

ssh remote /home/user/slack.py
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"/home/user/slack.py"</span>, line 242, <span class="k">in</span> &lt;module&gt;
    from ansible.module_utils.basic import AnsibleModule
ModuleNotFoundError: No module named <span class="s1">'ansible'</span>

</code></pre></div></div>

<p>We can copy over the <code class="language-plaintext highlighter-rouge">ansible.module_utils</code> files to fix this issue:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-av</span> ansible <span class="nt">--include</span> <span class="s2">"ansible"</span> <span class="nt">--include</span> <span class="s2">"ansible/module_utils"</span> <span class="nt">--include</span> <span class="s2">"ansible/module_utils/**"</span> <span class="nt">--exclude</span> <span class="s2">"*"</span> remote:
</code></pre></div></div>

<p>And now we see that it behaves the same way as the locally run module.
It waits for JSON input and then prints the result as JSON output.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh remote /home/user/slack.py
<span class="o">{}</span>
^D

</code></pre></div></div>

<p>We get the same error that we had before with the local module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Error: Module unable to locate ANSIBLE_MODULE_ARGS in json data from stdin.  Unable to figure out what parameters were passed</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">failed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</code></pre></div></div>

<p>If we provide the token and message we can see that it works:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh remote /home/user/slack.py
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{</span><span class="s2">"token"</span>: <span class="s2">"REDACTED"</span>, <span class="s2">"msg"</span>: <span class="s2">"hello from remote"</span> <span class="o">}}</span>
^D
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VALUE_SPECIFIED_IN_NO_LOG_PARAMETER</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello from remote</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/images/hello_from_remote.png" alt="App name" /></p>

<p>Normally we wouldn’t run slack remotely, but this example illustrates that
remote modules run the same way as local modules if the <code class="language-plaintext highlighter-rouge">ansible.module_utils</code>
files are present in the working directory.</p>

<p>To make this easier we can use the <a href="https://docs.python.org/3/library/zipapp.html">zipapp</a> python package.
Zipapps are executable zip files that contain a program with all their dependencies packaged in the zip file. We can
use this to package up <code class="language-plaintext highlighter-rouge">ansible.module_utils</code> and a module together to ship to a remote host.</p>

<p>First we need to create a directory with all the files that we need for the module including the module itself
and <code class="language-plaintext highlighter-rouge">ansible.module_utils</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>slack
<span class="nb">cp </span>slack.py slack/
rsync <span class="nt">-av</span> ansible <span class="nt">--include</span> <span class="s2">"ansible"</span> <span class="nt">--include</span> <span class="s2">"ansible/module_utils"</span> <span class="nt">--include</span> <span class="s2">"ansible/module_utils/**"</span> <span class="nt">--exclude</span> <span class="s2">"*"</span> slack/
</code></pre></div></div>

<p>Then we can make the zipapp:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> zipapp slack <span class="nt">-m</span> <span class="s2">"slack:main"</span> <span class="nt">-p</span> <span class="s2">"/usr/bin/env python3"</span>
</code></pre></div></div>

<p>Running this zipapp works just like the module:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./slack.pyz
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{</span><span class="s2">"token"</span>: <span class="s2">"REDACTED"</span>, <span class="s2">"msg"</span>: <span class="s2">"hello from zipapp"</span> <span class="o">}}</span>
^D
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VALUE_SPECIFIED_IN_NO_LOG_PARAMETER</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello from zipapp</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/images/hello_from_zipapp.png" alt="App name" /></p>

<p>We can copy this over to a remote host for execution:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
rsync <span class="nt">-av</span> slack.pyz remote:

</code></pre></div></div>

<p>And then run it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh remote /home/user/slack.pyz
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{</span><span class="s2">"token"</span>: <span class="s2">"REDACTED"</span>, <span class="s2">"msg"</span>: <span class="s2">"hello from zipapp remote"</span><span class="o">}}</span>
^D
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VALUE_SPECIFIED_IN_NO_LOG_PARAMETER</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello from zipapp remote</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/images/hello_from_zipapp_remote.png" alt="App name" /></p>

<p>What is nice about the zipapp method is that we can include other dependencies
besides <code class="language-plaintext highlighter-rouge">ansible.module_utils</code>. Any pure python package could be included.  Python
packages with C dependencies will not work unless the C library is available.</p>

<p>Ansible doesn’t use the zipapp method of shipping modules, because it was not
available when Ansible was initially developed. It builds tarballs called
<a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_program_flow_modules.html#ansiballz-framework">Ansiballz</a>
instead.  Zipapp was used here as an illustration of its underlying method.</p>

<p>In conclusion, we see that Ansible modules are programs that can include some
Python dependencies and can run on remote machines without installing the
dependencies. Ansible cleans up all these files after execution.</p>

<p>This brings up a few new questions:</p>

<ul>
  <li>How many modules can we run at the same time?</li>
  <li>How many hosts can we run them against?</li>
  <li>What are the bottlenecks to Ansible scaling?</li>
  <li>How much time is spent building Ansiballz?</li>
  <li>Can we build the Ansiballz/zipapps ahead of time or do we have to build them at runtime?</li>
</ul>

<p>I’ll answer those questions in a future post.</p>]]></content><author><name>Ben Thomasson</name></author><category term="ansible" /><category term="code-review" /><summary type="html"><![CDATA[This post answers the question from the last post:]]></summary></entry><entry><title type="html">Remote Ansible Modules</title><link href="/ansible/code-review/remote-ansible-modules/" rel="alternate" type="text/html" title="Remote Ansible Modules" /><published>2025-02-22T08:33:00-05:00</published><updated>2025-02-22T08:33:00-05:00</updated><id>/ansible/code-review/remote-ansible-modules</id><content type="html" xml:base="/ansible/code-review/remote-ansible-modules/"><![CDATA[<p>In this post I’ll answer the questions that arose from the <a href="/ansible/code-review/how-does-ansible-work/">last post</a>:</p>

<ul>
  <li>How do modules work on a remote host?</li>
  <li>Does the module need to run on the remote host or locally?</li>
  <li>How do we get the module to the remote host?</li>
  <li>Does python need to be installed there?</li>
</ul>

<p>Remote modules work the same way on remote machines as the do locally.  They
run as a separate process.  There are a few ways to read the inputs listed in
the documentation
<a href="https://docs.ansible.com/ansible/2.7/dev_guide/developing_program_flow_modules.html">here</a>.
In the example below we use an
<a href="https://docs.ansible.com/ansible/2.7/dev_guide/developing_program_flow_modules.html#old-style-modules">old-style</a>
module which expects the inputs to be read from a file in the <code class="language-plaintext highlighter-rouge">key=value</code> form.</p>

<p>Here is a simple old-style module named <code class="language-plaintext highlighter-rouge">argtest</code> that I will use in the
exploration of remote module execution:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#!/usr/bin/python
</span>
<span class="c1"># This is an old style module
</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">glob</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">executable</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">more_args</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
<span class="n">files</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="s">'*'</span><span class="p">))</span>
<span class="n">env</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span>
    <span class="s">"args"</span> <span class="p">:</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">,</span>
    <span class="s">"executable"</span><span class="p">:</span> <span class="n">executable</span><span class="p">,</span>
    <span class="s">"more_args"</span><span class="p">:</span> <span class="n">more_args</span><span class="p">,</span>
    <span class="s">"files"</span><span class="p">:</span> <span class="n">files</span><span class="p">,</span>
    <span class="s">"env"</span><span class="p">:</span> <span class="n">env</span>
<span class="p">}))</span>


</code></pre></div></div>

<p>This module reads its arguments from a file and here is an example input file named <code class="language-plaintext highlighter-rouge">args</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>key=value


</code></pre></div></div>

<p>We can call that module locally with python and the args file.  If we pipe it through json.tool we get
nicer output.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 argtest.py args | python <span class="nt">-m</span> json.tool
</code></pre></div></div>

<p>This returns:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">args</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">argtest.py</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">args</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">executable</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#!/usr/bin/python</span><span class="se">\n\n</span><span class="s2"># This is an old style module</span><span class="se">\n\n</span><span class="s2">import os</span><span class="se">\n</span><span class="s2">import sys</span><span class="se">\n</span><span class="s2">import json</span><span class="se">\n</span><span class="s2">import glob</span><span class="se">\n\n</span><span class="s2">args = sys.argv</span><span class="se">\n</span><span class="s2">with open(sys.argv[0]) as f:</span><span class="se">\n</span><span class="s2">    executable = f.read()</span><span class="se">\n</span><span class="s2">with open(sys.argv[1]) as f:</span><span class="se">\n</span><span class="s2">    more_args = f.read()</span><span class="se">\n</span><span class="s2">files = glob.glob(os.path.join(os.path.dirname(sys.argv[0]), '*'))</span><span class="se">\n</span><span class="s2">env = dict(os.environ)</span><span class="se">\n\n</span><span class="s2">print(json.dumps({</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">args</span><span class="se">\"</span><span class="s2"> : args,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">executable</span><span class="se">\"</span><span class="s2">: executable,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">more_args</span><span class="se">\"</span><span class="s2">: more_args,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">files</span><span class="se">\"</span><span class="s2">: files,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">env</span><span class="se">\"</span><span class="s2">: env</span><span class="se">\n</span><span class="s2">}))</span><span class="se">\n\n\n</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">more_args</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">key=value</span><span class="se">\n\n</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">files</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">argtest.py</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">args</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">env</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="nx">REDACTED</span> <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p>Let’s try that remotely over ssh.  First we need to send the module and the arguments file to the remote host.
Then we can run the module directly since it starts with a <code class="language-plaintext highlighter-rouge">#!/usr/bin/python</code> line.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-av</span> argtest.py args remote:
ssh remote /home/user/argtest.py args | python <span class="nt">-m</span> json.tool
</code></pre></div></div>

<p>The output is similar to the locally run module.  The only exception are the location of the files.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">args</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">/home/user/argtest.py</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">args</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">executable</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#!/usr/bin/python</span><span class="se">\n\n</span><span class="s2"># This is an old style module</span><span class="se">\n\n</span><span class="s2">import os</span><span class="se">\n</span><span class="s2">import sys</span><span class="se">\n</span><span class="s2">import json</span><span class="se">\n</span><span class="s2">import glob</span><span class="se">\n\n</span><span class="s2">args = sys.argv</span><span class="se">\n</span><span class="s2">with open(sys.argv[0]) as f:</span><span class="se">\n</span><span class="s2">    executable = f.read()</span><span class="se">\n</span><span class="s2">with open(sys.argv[1]) as f:</span><span class="se">\n</span><span class="s2">    more_args = f.read()</span><span class="se">\n</span><span class="s2">files = glob.glob(os.path.join(os.path.dirname(sys.argv[0]), '*'))</span><span class="se">\n</span><span class="s2">env = dict(os.environ)</span><span class="se">\n\n</span><span class="s2">print(json.dumps({</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">args</span><span class="se">\"</span><span class="s2"> : args,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">executable</span><span class="se">\"</span><span class="s2">: executable,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">more_args</span><span class="se">\"</span><span class="s2">: more_args,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">files</span><span class="se">\"</span><span class="s2">: files,</span><span class="se">\n</span><span class="s2">    </span><span class="se">\"</span><span class="s2">env</span><span class="se">\"</span><span class="s2">: env</span><span class="se">\n</span><span class="s2">}))</span><span class="se">\n\n\n</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">more_args</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">key=value</span><span class="se">\n\n</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">files</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">/home/user/argtest.py</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">/home/user/args</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">env</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="nx">REDACTED</span><span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>The remote system needs to have python installed if it is running python based
modules.  If they are binary modules this is not needed, but the file system
needs to be writable by the user running the module.</p>

<p>Here we learned that Ansible modules run remotely the same way that they do locally:
they are executed as stand-alone processes.</p>

<p>Notice that we did not install Ansible on the remote machine.  This simple
module did not import anything from Ansible.  Other modules do import from
ansible.module_utils.</p>

<p>This raises a few more questions:</p>

<ul>
  <li>How to modules import from dependencies?</li>
  <li>Do dependencies need to be installed on the remote host?</li>
  <li>Are dependencies shipped to the remote host?</li>
</ul>

<p>In the <a href="/ansible/code-review/remote-ansible-modules2/">next post</a> I’ll answer these questions and cover
how other Ansible modules run remotely.</p>]]></content><author><name>Ben Thomasson</name></author><category term="ansible" /><category term="code-review" /><summary type="html"><![CDATA[In this post I’ll answer the questions that arose from the last post:]]></summary></entry><entry><title type="html">How does Ansible work?</title><link href="/ansible/code-review/how-does-ansible-work/" rel="alternate" type="text/html" title="How does Ansible work?" /><published>2025-02-22T07:44:00-05:00</published><updated>2025-02-22T07:44:00-05:00</updated><id>/ansible/code-review/how-does-ansible-work</id><content type="html" xml:base="/ansible/code-review/how-does-ansible-work/"><![CDATA[<p>Ansible is an automation tool that allows you to manage remote machines with
modules.  How do these modules work?  Let’s take a look at the
slack module as an example.</p>

<p>First we need ansible installed on our local machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv .venv
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install </span>ansible
</code></pre></div></div>

<p>Then download the slack module:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://raw.githubusercontent.com/ansible-collections/community.general/refs/heads/main/plugins/modules/slack.py
</code></pre></div></div>

<p>Each module is a small self contained program.  We can run these programs
directly with the python interpreter.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 slack.py
</code></pre></div></div>

<p>It hangs there waiting for input.  If we press control-D now we get an error:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Error: Module unable to decode stdin/parameters as valid JSON. Unable to parse what parameters were passed</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">failed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</code></pre></div></div>

<p>That’s a clue that it is waiting for JSON input.  Let’s give it a valid JSON input:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> python3 slack.py
<span class="o">{}</span>
^D
</code></pre></div></div>

<p>We get a new error message:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Error: Module unable to locate ANSIBLE_MODULE_ARGS in JSON data from stdin. Unable to figure out what parameters were passed</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">failed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</code></pre></div></div>

<p>It is looking for ANSIBLE_MODULE_ARGS in the JSON:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 slack.py 
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{}}</span>

^D
</code></pre></div></div>

<p>We finally get the arguments that it expects in the error message:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="dl">"</span><span class="s2">failed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">missing required arguments: token</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">}}}</span>
</code></pre></div></div>

<p>Running this output through <code class="language-plaintext highlighter-rouge">python -m json.tool</code> makes it more readable:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">failed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">missing required arguments: token</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This matches the documentation for the module here: <a href="https://docs.ansible.com/ansible/latest/modules/slack_module.html">https://docs.ansible.com/ansible/latest/modules/slack_module.html</a></p>

<p>We need to provide the token argument at least.  Slack tokens are of the form <code class="language-plaintext highlighter-rouge">abc/xyz/123</code> so let’s provide that:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 slack.py
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{</span><span class="s2">"token"</span>: <span class="s2">"abc/xyz/123"</span><span class="o">}}</span>
^D

<span class="o">{</span>
    <span class="s2">"failed"</span>: <span class="nb">true</span>,
    <span class="s2">"msg"</span>: <span class="s2">" failed to send {</span><span class="se">\"</span><span class="s2">username</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">Ansible</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">icon_url</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">link_names</span><span class="se">\"</span><span class="s2">: 1} to https://hooks.slack.com/services/[obscured]: HTTP Error 404: Not Found"</span>,
    <span class="s2">"invocation"</span>: <span class="o">{</span>
        <span class="s2">"module_args"</span>: <span class="o">{</span>
            <span class="s2">"token"</span>: <span class="s2">"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER"</span>,
            <span class="s2">"username"</span>: <span class="s2">"Ansible"</span>,
            <span class="s2">"icon_url"</span>: <span class="s2">"https://www.ansible.com/favicon.ico"</span>,
            <span class="s2">"link_names"</span>: 1,
            <span class="s2">"validate_certs"</span>: <span class="nb">true</span>,
            <span class="s2">"color"</span>: <span class="s2">"normal"</span>,
            <span class="s2">"domain"</span>: null,
            <span class="s2">"msg"</span>: null,
            <span class="s2">"channel"</span>: null,
            <span class="s2">"thread_id"</span>: null,
            <span class="s2">"icon_emoji"</span>: null,
            <span class="s2">"parse"</span>: null,
            <span class="s2">"attachments"</span>: null,
            <span class="s2">"blocks"</span>: null,
            <span class="s2">"message_id"</span>: null
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This error message shows that we are making some progress.  It is contacting slack and rejecting the token.   We can
set up a real token using slack webhooks and try again.</p>

<p>To set up an incoming slack webhook we need to create an app here <a href="https://api.slack.com/apps">https://api.slack.com/apps</a>.</p>

<p><img src="/assets/images/create_new_app.png" alt="Create New App" /></p>

<p>Set the app name:</p>

<p><img src="/assets/images/app_name.png" alt="App name" /></p>

<p>Then create in incoming webhook for that app here:</p>

<p><img src="/assets/images/incoming_webhooks.png" alt="incoming webhooks" /></p>

<p>Turn it on:</p>

<p><img src="/assets/images/incoming_webhooks2.png" alt="incoming webhooks" /></p>

<p>Give it permission:</p>

<p><img src="/assets/images/permission.png" alt="webhooks permission" /></p>

<p>Then we can get the token from the webhook URL and paste it into the JSON as I do here (with the token redacted of course):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 slack.py
<span class="o">{</span><span class="s2">"ANSIBLE_MODULE_ARGS"</span>: <span class="o">{</span><span class="s2">"token"</span>: <span class="s2">"REDACTED"</span>, <span class="s2">"msg"</span>: <span class="s2">"hello ben"</span><span class="o">}}</span>
^D
</code></pre></div></div>

<p>This returns:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">invocation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">module_args</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VALUE_SPECIFIED_IN_NO_LOG_PARAMETER</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello ben</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ansible</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.ansible.com/favicon.ico</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link_names</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">validate_certs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">color</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">normal</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">domain</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">channel</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">thread_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">icon_emoji</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">blocks</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">message_id</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Success!  We have sent a message with the slack module by itself.</p>

<p><img src="/assets/images/hello_ben.png" alt="hello_ben" /></p>

<p>We have learned that Ansible modules are programs that expect JSON input on the
standard input and write JSON to the standard output.  If we look at the source
code for the slack module
<a href="https://github.com/ansible-collections/community.general/blob/main/plugins/modules/slack.py">here</a>
we see that it is written in Python, but modules can be written in other
languages as well as long as they conform to this JSON protocol.</p>

<p>This leads to new questions:</p>

<ul>
  <li>How do modules work on a remote host?</li>
  <li>Does the module need to run on the remote host or locally?</li>
  <li>How do we get the module to the remote host?</li>
  <li>Does python need to be installed there?</li>
</ul>

<p>In this <a href="/ansible/code-review/remote-ansible-modules/">next post</a> I will answer these questions.</p>]]></content><author><name>Ben Thomasson</name></author><category term="ansible" /><category term="code-review" /><summary type="html"><![CDATA[Ansible is an automation tool that allows you to manage remote machines with modules. How do these modules work? Let’s take a look at the slack module as an example.]]></summary></entry></feed>